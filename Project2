from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn import preprocessing
from sklearn.datasets import fetch_20newsgroups
from sklearn.cluster import KMeans
from sklearn.metrics import confusion_matrix

from sklearn.metrics import homogeneity_score
from sklearn.metrics import v_measure_score
from sklearn.metrics import completeness_score
from sklearn.metrics import adjusted_rand_score
from sklearn.metrics import adjusted_mutual_info_score

import matplotlib.pyplot as plt

from sklearn.decomposition import TruncatedSVD
from sklearn.decomposition import RandomizedPCA

from sklearn.decomposition import NMF

import numpy as np

import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

categories = ['comp.graphics', 'comp.os.ms-windows.misc',
                      'comp.sys.ibm.pc.hardware', 'comp.sys.mac.hardware',
                      'rec.autos', 'rec.motorcycles',
                      'rec.sport.baseball', 'rec.sport.hockey']

train_dataset = fetch_20newsgroups(subset = 'train', categories = categories, shuffle = True, random_state = None)
test_dataset = fetch_20newsgroups(subset = 'test', categories = categories, shuffle = True, random_state = None)

Bin_Target_Train = [int(i > 3) for i in train_dataset.target]
Bin_Target_Test = [int(i > 3) for i in test_dataset.target]

count_vect = CountVectorizer(min_df=3, stop_words='english')

X_train_counts = count_vect.fit_transform(train_dataset.data)
X_test_counts = count_vect.transform(test_dataset.data)


tfidf_transformer = TfidfTransformer()
X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)
X_test_tfidf = tfidf_transformer.transform(X_test_counts)


print("X_train_tfidf size: ", X_train_tfidf.shape)
print("X_test_tfidf  size: ", X_test_tfidf.shape)

kmeans = KMeans(n_clusters=2,  n_init=60, max_iter=1000,  random_state=None).fit(X_train_tfidf)
pred = kmeans.predict(X_test_tfidf)

print(confusion_matrix(Bin_Target_Test, pred))

#
# Question 3: Report the 5 measures above for the K-means clustering results you get.

def print_metrics_and_return(Bin_Target_Test, pred):
    m1 = (homogeneity_score(Bin_Target_Test, pred))
    m2 = (v_measure_score(Bin_Target_Test, pred))
    m3 = (completeness_score(Bin_Target_Test, pred))
    m4 = (adjusted_rand_score(Bin_Target_Test, pred))
    m5 = (adjusted_mutual_info_score(Bin_Target_Test, pred))
    return list([m1, m2, m3, m4, m5])


print(print_metrics_and_return(Bin_Target_Test, pred))


tsvd = TruncatedSVD(n_components=1000, n_iter=7, random_state=42).fit(X_train_tfidf)
X_shrunk = tsvd.transform(X_train_tfidf)
print(tsvd.explained_variance_ratio_)
A = [(tsvd.explained_variance_ratio_[0:i]).sum() for i in range(1, 1001)]
print(A)


# plt.plot([i for i in range(1,1001)],A)
# plt.xlabel("Number of Features")
# plt.ylabel("Variance Ratio")
#
#
# fig, ax = plt.subplots
#
# ax.plot([i for i in range(0, 1000)], A)
#
# plt.show()




metrics_svd = []
metrics_nmf = []

for i in [1,2,3,5,10,20,50,100,300]:
    t_svd = TruncatedSVD(n_components=i, n_iter=7, random_state=42)
    t_nmf = NMF(n_components=i, init='random', random_state=0)

    X_train_svd = t_svd.fit_transform(X_train_tfidf)
    X_test_svd = t_svd.transform(X_test_tfidf)

    X_train_nmf = t_nmf.fit_transform(X_train_tfidf)
    X_test_nmf = t_nmf.transform(X_test_tfidf)

    kmeans_svd = KMeans(n_clusters=2, n_init=5, max_iter=1000, random_state=None).fit(
        X_train_svd)  # change n_init to 30
    kmeans_nmf = KMeans(n_clusters=2, n_init=5, max_iter=1000, random_state=None).fit(
        X_train_nmf)  # change n_init to 30

    pred_svd = kmeans_svd.predict(X_test_svd)
    pred_nmf = kmeans_nmf.predict(X_test_nmf)

    print(X_test_svd.shape, pred_svd.shape, X_test_nmf.shape, pred_nmf.shape)

    metrics_svd.append(print_metrics_and_return(Bin_Target_Test, pred_svd))
    metrics_nmf.append(print_metrics_and_return(Bin_Target_Test, pred_nmf))

    print("SVD metrics for " + str(i) + " components:" + str(print_metrics_and_return(Bin_Target_Test, pred_svd)))
    print("NMF metrics for " + str(i) + " components:" + str(print_metrics_and_return(Bin_Target_Test, pred_nmf)))
    print()

#
# def plotKmeans(X_svd_r,y_plot, Bin_target_Test,best_r):
#
#     if best_r > 2:
#         svdplot = TruncatedSVD(n_components=2, random_state=42).fit(X_svd_r)
#         X_plot = svdplot.transform(X_svd_r)
#     else:
#         X_plot = X_svd_r
#
#     """
#     plt.subplot(2,1,1)
#     plt.scatter(X_plot[:, 0], X_plot[:, 1], c=y_plot,label = '0')
#     plt.title("Cluster Labels")
#     plt.legend()
#     plt.subplot(2,1,2)
#     plt.scatter(X_plot[:, 0], X_plot[:, 1], c=Bin_target_Test, label = '1')
#     plt.title("Class Labels")
#     plt.legend()
#     plt.show()
#     """
#     import matplotlib.cm as cm
#     plt.subplot(2, 1, 1)
#     x = X_plot[:,0]
#     y = X_plot[:,1]
#     classes = y_plot
#     cmap = cm.get_cmap("viridis", 2)
#     plt.scatter(x, y, c=classes, label=classes, cmap=cmap)
#     plt.colorbar()
#     unique_classes_1 = list(set(classes))
#     plt.table(cellText=[[x] for x in unique_classes_1], loc='lower right',
#               colWidths=[0.2], rowColours=cmap(np.array(unique_classes_1) - 1),
#               rowLabels=['label%d' % x for x in unique_classes_1],
#               colLabels=['classes'])
#     plt.title("Cluster Labels")
#     plt.subplot(2, 1, 2)
#     x = X_plot[:,0]
#     y = X_plot[:,1]
#     classes = Bin_target_Test
#     cmap = cm.get_cmap("viridis", 2)
#     plt.scatter(x, y, c=classes, label=classes, cmap=cmap)
#     plt.colorbar()
#     unique_classes_2 = list(set(classes))
#     plt.table(cellText=[[x] for x in unique_classes_2], loc='lower right',
#               colWidths=[0.2], rowColours=cmap(np.array(unique_classes_2) - 1),
#               rowLabels=['label%d' % x for x in unique_classes_2],
#               colLabels=['classes'])
#     plt.title("Class Labels")
#
#     plt.show()


def plotKmeans(X_svd_r,y_plot, Bin_target_Test,best_r):

    if best_r > 2:
        svdplot = TruncatedSVD(n_components=2, random_state=42).fit(X_svd_r)
        X_plot = svdplot.transform(X_svd_r)
    else:
        X_plot = X_svd_r

    plt.subplot(2,1,1)
    plt.scatter(X_plot[:, 0], X_plot[:, 1], c=y_plot)
    plt.title("Cluster Labels")
    plt.subplot(2,1,2)
    plt.scatter(X_plot[:, 0], X_plot[:, 1], c=Bin_target_Test)
    plt.title("Class Labels")
    plt.show()




def scalingfeatures(X):
    X_scaled = preprocessing.scale(X, axis=0, with_mean=False, with_std=True)
    return X_scaled

def logscale(X,c):
    X_sign  = np.sign(X)
    X_abs = np.absolute(X)
    return X_sign*(np.log(X_abs+c)-np.log(c))




best_r_svd = 3
best_r_nmf = 2
t_svd = TruncatedSVD(n_components=best_r_svd, n_iter=7, random_state=42)
t_nmf = NMF(n_components=best_r_nmf, init='random', random_state=0)

X_train_svd = t_svd.fit_transform(X_train_tfidf)

X_test_svd = t_svd.transform(X_test_tfidf)


X_train_nmf = t_nmf.fit_transform(X_train_tfidf)

X_test_nmf = t_nmf.transform(X_test_tfidf)

kmeans_svd = KMeans(n_clusters=2, n_init=5, max_iter=1000, random_state=None).fit(
    X_train_svd)  # change n_init to 30
kmeans_nmf = KMeans(n_clusters=2, n_init=5, max_iter=1000, random_state=None).fit(
    X_train_nmf)  # change n_init to 30

pred_svd = kmeans_svd.predict(X_test_svd)
pred_nmf = kmeans_nmf.predict(X_test_nmf)

plotKmeans(X_test_svd,pred_svd,Bin_Target_Test,best_r_svd)

plotKmeans(X_test_nmf,pred_nmf,Bin_Target_Test,best_r_nmf)



def scalingmetric(X_train, X_test, Bin_Target_Test, c, best_r, scale = 0, log = 0, order = 0):
    if order == 0:
        if scale == 0:
            X_train_1 = scalingfeatures(X_train)
            X_test_1 = scalingfeatures(X_test)
        else:
            X_train_1 = X_train
            X_test_1 = X_test

        if log == 0:
            X_train_2 = logscale(X_train_1, c)
            X_test_2 = logscale(X_test_1,c)
        else:
            X_train_2 = X_train_1
            X_test_2 = X_test_1
    else:
        X_train_1 = logscale(X_train,c)
        X_test_1 = logscale(X_test,c)
        X_train_2 = scalingfeatures(X_train_1)
        X_test_2 = scalingfeatures(X_test_1)

    kmeans = KMeans(n_clusters=2, n_init=5, max_iter=1000, random_state=0).fit(
        X_train_2)

    pred = kmeans.predict(X_test_2)

    print(print_metrics_and_return(Bin_Target_Test, pred))
    plotKmeans(X_test_2, pred, Bin_Target_Test, best_r)

print('Metrics for SVD')

print('svd with log')
scalingmetric(X_train_svd,X_test_svd,Bin_Target_Test,0.01,2, 1, 0, 0)
print()
print('svd with scale')
scalingmetric(X_train_svd,X_test_svd,Bin_Target_Test,0.01,2, 0, 1, 0)
print()
print('svd with scale followed by log')
scalingmetric(X_train_svd,X_test_svd,Bin_Target_Test,0.01,2, 0, 0, 0)
print()
print('svd with log followed by scale')
scalingmetric(X_train_svd,X_test_svd,Bin_Target_Test,0.01,2, 0, 0, 1)

print('-'*40)

print('Metrics for NMF')

print('nmf with log')
scalingmetric(X_train_nmf,X_test_nmf,Bin_Target_Test,0.01,2, 1, 0, 0)
print()
print('nmf with scale')
scalingmetric(X_train_nmf,X_test_nmf,Bin_Target_Test,0.01,2, 0, 1, 0)
print()
print('nmf with scale followed by log')
scalingmetric(X_train_nmf,X_test_nmf,Bin_Target_Test,0.01,2, 0, 0, 0)
print()
print('nmf with log followed by scale')
scalingmetric(X_train_nmf,X_test_nmf,Bin_Target_Test,0.01,2, 0, 0, 1)



train_dataset_all_cat = fetch_20newsgroups(subset = 'train', shuffle = True, random_state = 0)
test_dataset_all_cat = fetch_20newsgroups(subset = 'test', shuffle = True, random_state = 0)

count_vect_all = CountVectorizer(min_df=3, stop_words='english')

X_train_counts_all = count_vect_all.fit_transform(train_dataset_all_cat.data)
X_test_counts_all = count_vect_all.transform(test_dataset_all_cat.data)

tfidf_transformer_all = TfidfTransformer()
X_train_tfidf_all = tfidf_transformer_all.fit_transform(X_train_counts_all)
X_test_tfidf_all = tfidf_transformer_all.transform(X_test_counts_all)


print("X_train_tfidf size: ", X_train_tfidf_all.shape)
print("X_test_tfidf  size: ", X_test_tfidf_all.shape)


kmeans_all = KMeans(n_clusters=20,  n_init=5, max_iter=500,  random_state=0).fit(X_train_tfidf_all)
pred_all = kmeans_all.predict(X_test_tfidf_all)

plotKmeans(X_test_tfidf_all,pred_all,test_dataset_all_cat.target,4)

